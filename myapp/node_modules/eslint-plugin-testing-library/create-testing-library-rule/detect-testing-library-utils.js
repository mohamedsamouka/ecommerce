"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectTestingLibraryUtils = void 0;
const utils_1 = require("@typescript-eslint/utils");
const node_utils_1 = require("../node-utils");
const utils_2 = require("../utils");
const SETTING_OPTION_OFF = 'off';
const USER_EVENT_PACKAGE = '@testing-library/user-event';
const REACT_DOM_TEST_UTILS_PACKAGE = 'react-dom/test-utils';
const FIRE_EVENT_NAME = 'fireEvent';
const CREATE_EVENT_NAME = 'createEvent';
const USER_EVENT_NAME = 'userEvent';
const RENDER_NAME = 'render';
function detectTestingLibraryUtils(ruleCreate, { skipRuleReportingCheck = false } = {}) {
    return (context, optionsWithDefault) => {
        const importedTestingLibraryNodes = [];
        let importedCustomModuleNode = null;
        let importedUserEventLibraryNode = null;
        let importedReactDomTestUtilsNode = null;
        const customModuleSetting = context.settings['testing-library/utils-module'];
        const customRendersSetting = context.settings['testing-library/custom-renders'];
        const customQueriesSetting = context.settings['testing-library/custom-queries'];
        function isPotentialTestingLibraryFunction(node, isPotentialFunctionCallback) {
            if (!node) {
                return false;
            }
            const referenceNode = (0, node_utils_1.getReferenceNode)(node);
            const referenceNodeIdentifier = (0, node_utils_1.getPropertyIdentifierNode)(referenceNode);
            if (!referenceNodeIdentifier) {
                return false;
            }
            const importedUtilSpecifier = getTestingLibraryImportedUtilSpecifier(referenceNodeIdentifier);
            const originalNodeName = (0, node_utils_1.isImportSpecifier)(importedUtilSpecifier) &&
                importedUtilSpecifier.local.name !== importedUtilSpecifier.imported.name
                ? importedUtilSpecifier.imported.name
                : undefined;
            if (!isPotentialFunctionCallback(node.name, originalNodeName)) {
                return false;
            }
            if (isAggressiveModuleReportingEnabled()) {
                return true;
            }
            return isNodeComingFromTestingLibrary(referenceNodeIdentifier);
        }
        const isAggressiveModuleReportingEnabled = () => !customModuleSetting;
        const isAggressiveRenderReportingEnabled = () => {
            const isSwitchedOff = customRendersSetting === SETTING_OPTION_OFF;
            const hasCustomOptions = Array.isArray(customRendersSetting) && customRendersSetting.length > 0;
            return !isSwitchedOff && !hasCustomOptions;
        };
        const isAggressiveQueryReportingEnabled = () => {
            const isSwitchedOff = customQueriesSetting === SETTING_OPTION_OFF;
            const hasCustomOptions = Array.isArray(customQueriesSetting) && customQueriesSetting.length > 0;
            return !isSwitchedOff && !hasCustomOptions;
        };
        const getCustomModule = () => {
            if (!isAggressiveModuleReportingEnabled() &&
                customModuleSetting !== SETTING_OPTION_OFF) {
                return customModuleSetting;
            }
            return undefined;
        };
        const getCustomRenders = () => {
            if (!isAggressiveRenderReportingEnabled() &&
                customRendersSetting !== SETTING_OPTION_OFF) {
                return customRendersSetting;
            }
            return [];
        };
        const getCustomQueries = () => {
            if (!isAggressiveQueryReportingEnabled() &&
                customQueriesSetting !== SETTING_OPTION_OFF) {
                return customQueriesSetting;
            }
            return [];
        };
        const getTestingLibraryImportNode = () => {
            return importedTestingLibraryNodes[0];
        };
        const getAllTestingLibraryImportNodes = () => {
            return importedTestingLibraryNodes;
        };
        const getCustomModuleImportNode = () => {
            return importedCustomModuleNode;
        };
        const getTestingLibraryImportName = () => {
            return (0, node_utils_1.getImportModuleName)(importedTestingLibraryNodes[0]);
        };
        const getCustomModuleImportName = () => {
            return (0, node_utils_1.getImportModuleName)(importedCustomModuleNode);
        };
        const isTestingLibraryImported = (isStrict = false) => {
            const isSomeModuleImported = importedTestingLibraryNodes.length !== 0 || !!importedCustomModuleNode;
            return ((!isStrict && isAggressiveModuleReportingEnabled()) ||
                isSomeModuleImported);
        };
        const isQuery = (node) => {
            const hasQueryPattern = /^(get|query|find)(All)?By.+$/.test(node.name);
            if (!hasQueryPattern) {
                return false;
            }
            if (isAggressiveQueryReportingEnabled()) {
                return true;
            }
            const customQueries = getCustomQueries();
            const isBuiltInQuery = utils_2.ALL_QUERIES_COMBINATIONS.includes(node.name);
            const isReportableCustomQuery = customQueries.some((pattern) => new RegExp(pattern).test(node.name));
            return isBuiltInQuery || isReportableCustomQuery;
        };
        const isGetQueryVariant = (node) => {
            return isQuery(node) && node.name.startsWith('get');
        };
        const isQueryQueryVariant = (node) => {
            return isQuery(node) && node.name.startsWith('query');
        };
        const isFindQueryVariant = (node) => {
            return isQuery(node) && node.name.startsWith('find');
        };
        const isSyncQuery = (node) => {
            return isGetQueryVariant(node) || isQueryQueryVariant(node);
        };
        const isAsyncQuery = (node) => {
            return isFindQueryVariant(node);
        };
        const isCustomQuery = (node) => {
            return isQuery(node) && !utils_2.ALL_QUERIES_COMBINATIONS.includes(node.name);
        };
        const isBuiltInQuery = (node) => {
            return isQuery(node) && utils_2.ALL_QUERIES_COMBINATIONS.includes(node.name);
        };
        const isAsyncUtil = (node, validNames = utils_2.ASYNC_UTILS) => {
            return isPotentialTestingLibraryFunction(node, (identifierNodeName, originalNodeName) => {
                return (validNames.includes(identifierNodeName) ||
                    (!!originalNodeName &&
                        validNames.includes(originalNodeName)));
            });
        };
        const isFireEventUtil = (node) => {
            return isPotentialTestingLibraryFunction(node, (identifierNodeName, originalNodeName) => {
                return [identifierNodeName, originalNodeName].includes('fireEvent');
            });
        };
        const isUserEventUtil = (node) => {
            const userEvent = findImportedUserEventSpecifier();
            let userEventName;
            if (userEvent) {
                userEventName = userEvent.name;
            }
            else if (isAggressiveModuleReportingEnabled()) {
                userEventName = USER_EVENT_NAME;
            }
            if (!userEventName) {
                return false;
            }
            return node.name === userEventName;
        };
        const isFireEventMethod = (node) => {
            const fireEventUtil = findImportedTestingLibraryUtilSpecifier(FIRE_EVENT_NAME);
            let fireEventUtilName;
            if (fireEventUtil) {
                fireEventUtilName = utils_1.ASTUtils.isIdentifier(fireEventUtil)
                    ? fireEventUtil.name
                    : fireEventUtil.local.name;
  